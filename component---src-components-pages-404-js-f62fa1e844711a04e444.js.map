{"version":3,"sources":["webpack:///./src/components/pages/404.js","webpack:///./site-settings.js","webpack:///./gatsby/env.js","webpack:///./src/lib/static/useSiteMetadata.js","webpack:///./src/components/layout/Header/Header.js","webpack:///./src/components/meta/SEO/SEO.js","webpack:///./src/components/layout/Layout/Layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_layout_Layout_Layout__WEBPACK_IMPORTED_MODULE_1__","NotFoundPage","a","createElement","pageTitle","process","srcPath","cwd","compPath","libPath","SITE_URL","require","module","exports","manifest","name","short_name","lang","description","start_url","background_color","theme_color","display","icon","siteMetadata","siteUrl","title","author","srcPaths","src","styles","lib","@hooks","@layout","@pages","@meta","@media","envs","development","test","production","NODE_ENV","GHPAGES","GHPAGES_URL","URL","NETLIFY_SITE_URL","DEPLOY_PRIME_URL","NETLIFY_DEPLOY_URL","NETLIFY_ENV","CONTEXT","useSiteMetadata","data","_856328897","site","Header","_ref","siteTitle","react_default","className","gatsby_browser_entry","to","defaultProps","SEO","meta","metaDescription","Helmet","htmlAttributes","titleTemplate","content","property","concat","Layout","children","Fragment","SEO_SEO","layout_Header_Header","Date","getFullYear","href"],"mappings":"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","file":"component---src-components-pages-404-js-f62fa1e844711a04e444.js","sourcesContent":["import React from 'react'\nimport Layout from '../layout/Layout/Layout'\n\nconst NotFoundPage = () => (\n  <Layout pageTitle=\"404: Not found\">\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const srcPath = `${process.cwd()}/src`\nconst compPath = `${srcPath}/components`\nconst libPath = `${srcPath}/lib`\n\nconst { SITE_URL } = require('./gatsby/env')\n\nmodule.exports = {\n  manifest: {\n    name: 'gatsby-starter-default',\n    short_name: 'starter',\n    lang: 'en',\n    description: 'A new gatsby site.',\n    start_url: '/',\n    background_color: '#663399',\n    theme_color: '#663399',\n    display: 'minimal-ui',\n    // This path is relative to the root of the site.\n    icon: 'src/assets/images/gatsby-icon.png',\n  },\n  siteMetadata: {\n    siteUrl: SITE_URL,\n    title: 'Gatsby Default Starter',\n    description:\n      'Kick off your next, great Gatsby project with this default starter. This barebones starter ships with the main Gatsby configuration files you might need.',\n    author: '@gatsbyjs',\n  },\n  srcPaths: {\n    src: srcPath,\n    styles: `${srcPath}/styles`,\n    lib: libPath,\n    '@hooks': `${libPath}/hooks`,\n    '@layout': `${compPath}/layout`,\n    '@pages': `${compPath}/pages`,\n    '@meta': `${compPath}/meta`,\n    '@media': `${compPath}/media`,\n  },\n}\n","/**\n * Extract and process any ENV variables required by gatsby build.\n *\n * @file\n */\n\n// The default fallback URL for development.\nconst fallBack = 'http://localhost:8000'\n\nconst envs = {\n  development: 'development',\n  test: 'test',\n  production: 'production',\n}\n\n// Attempt to pull the required variables out of the process.env, with defaults filled in\nconst {\n  NODE_ENV = envs.development,\n  GHPAGES = false,\n  GHPAGES_URL = '',\n  URL: NETLIFY_SITE_URL = fallBack,\n  DEPLOY_PRIME_URL: NETLIFY_DEPLOY_URL = NETLIFY_SITE_URL,\n  CONTEXT: NETLIFY_ENV,\n} = process.env\n\n// Check if we're on netlify, and if netlify is using the prod instance. If not, attempts to\n// fill in the netlify deploy URL for a given branch. Ultimately it uses the fallback URL in the\n// end.\nconst SITE_URL =\n  (GHPAGES && GHPAGES_URL) ||\n  (NETLIFY_ENV === 'production' ? NETLIFY_SITE_URL : NETLIFY_DEPLOY_URL) ||\n  fallBack\n\nmodule.exports = {\n  envs,\n  SITE_URL,\n  NODE_ENV,\n  NETLIFY_ENV,\n  NETLIFY_DEPLOY_URL,\n  GHPAGES,\n  GHPAGES_URL,\n}\n","import { graphql, useStaticQuery } from 'gatsby'\nimport { siteMetadata } from '../../../site-settings'\n\n/**\n * Retrieve site metadata, else use the original site settings as a fallback.\n *\n * @returns {any}\n */\nconst useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return data ? data.site.siteMetadata : siteMetadata\n}\n\nexport default useSiteMetadata\n","import { Link } from 'gatsby'\nimport * as PropTypes from 'prop-types'\nimport React from 'react'\nimport './_header.scss'\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"header\">\n    <div className=\"header-wrapper\">\n      <h1 className=\"header-title\">\n        <Link to=\"/\" className=\"header-link\">\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport * as PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport useSiteMetadata from '../../../lib/static/useSiteMetadata'\n\nfunction SEO({ description, lang, meta, title }) {\n  const siteMetadata = useSiteMetadata()\n  const metaDescription = description || siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\n// Libs\nimport React from 'react'\nimport * as PropTypes from 'prop-types'\n// State\nimport useSiteMetadata from '../../../lib/static/useSiteMetadata'\n// Deps\nimport Header from '../Header/Header'\nimport SEO from '../../meta/SEO/SEO'\n// Assets\nimport './reset.css'\nimport './_layout.scss'\n\nconst Layout = ({ children, pageTitle }) => {\n  const { title } = useSiteMetadata()\n\n  return (\n    <>\n      <SEO title={pageTitle} />\n      <Header siteTitle={title} />\n      <div className=\"main-wrapper\">\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, Built with <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.defaultProps = {}\n\nLayout.propTypes = {\n  pageTitle: PropTypes.string.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}